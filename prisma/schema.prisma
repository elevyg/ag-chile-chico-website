// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.LongText
    access_token      String? @db.LongText
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.LongText
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    UserRole      UserRole  @default(USER)
    accounts      Account[]
    sessions      Session[]
    Article       Article[]
}

enum UserRole {
    ADMIN
    USER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Article {
    id          String      @id @default(cuid())
    title       TextContent @relation("ArticleTitle", fields: [titleId], references: [id])
    titleId     String
    description String?
    content     TextContent @relation("ArticleContent", fields: [contentId], references: [id])
    contentId   String
    slug        String      @unique
    authorId    String?
    author      User?       @relation(fields: [authorId], references: [id], onDelete: Cascade)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@index([authorId])
    @@index([contentId])
    @@index([titleId])
}

model TextContent {
    id              String        @id @default(uuid())
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    originalText    String        @db.LongText
    originalLang    Language      @relation(fields: [languageId], references: [languageId])
    languageId      String
    Translation     Translation[]
    ArticleTitles   Article[]     @relation("ArticleTitle")
    ArticleContents Article[]     @relation("ArticleContent")

    @@index([languageId])
}

model Translation {
    id            String      @id @default(uuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    textContent   TextContent @relation(fields: [textContentId], references: [id])
    textContentId String
    translation   String      @db.LongText
    language      Language    @relation(fields: [languageId], references: [languageId])
    languageId    String

    @@index([textContentId])
    @@index([languageId])
}

model Language {
    languageId   String        @id @unique
    languageName String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    TextContent  TextContent[]
    Translation  Translation[]

    @@index([languageId])
}
